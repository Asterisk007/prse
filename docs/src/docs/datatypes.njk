{% extends "docs_main.njk" %}
{% set doc_title="Datatypes" %}

{% block content %}
<div class="row">
    <div class="my-5">
            <h1>Datatypes</h1>
            <p>
                PRSE has five primitive datatypes:
                <ul>
                    <li><code>bool</code>: a value of <code>true</code> or <code>false</code></li>
                    <li><code>int</code>: a value of any integer existing in the range [-2147483648 to 2147483647]</li>
                    <li><code>double/doub</code>: a value of any double-precision floating-point number</li>
                    <li><code>character/char</code>: an ASCII character value</li>
                    <li><code>string</code>: a string of ASCII characters</li>
                </ul>
                Refer to the following table for datatype conversion:
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <td>Data type</td><td>Can be converted to</td>
                        </tr>
                    </thead>
                    <tr><td>int</td><td>string, double, bool(1)</td></tr>
                    <tr><td>string</td><td>string, int(2), double(2)</td></tr>
                    <tr><td>double</td><td>string, int(3), bool(1)</td></tr>
                    <tr><td>char</td><td>string, int(4), double(5)</td></tr>
                </table>
                Notes:
                <ol>
                    <li>Values that are exactly equal to 0, such as 0, 0.0, and so on, are interpreted as false. Values higher than 0 are interpreted as true.</li>
                    <li>String must match the regular expression /[0-9]+/ for integers, and /[0-9]*.[0-9]+/ for floating point numbers.</li>
                    <li>Double values will be rounded to the nearest whole number. To explicitly floor or ceiling a double, use ceiling(value.to_int()) or floor(value.to_int())</li>
                    <li>By default, characters use their ASCII code for integers. To convert the actual character to its integer equivalent, use atoi(value), like in C++.</li>
                    <li>Use value.to_int().to_double(). When using atoi, do atoi(value).to_double().</li>
                </ol>
            </p>
            <hr>
            <h2>On the subject of <code>null</code>:</h2>
            <p>
                While <code>null</code> certainly has its uses in programming, in general it is
                the bane of programmers trying to get their code to work properly. Null is used as a catch-all
                default for when a variable needs initialization, but the value is must take on is not known at
                compile time. Often, it is used for linked lists and other related data structures; while this is
                certainly a valid use case, I consider it a problem worth addressing. Thus, I introduce
                the following compromise:<br><br>
                <code>null</code> may be used <b><u>exclusively</u></b> for a variable when its value is
                not known at compile time. It may also be used in a comparison operation, but limited to
                <code>==</code> and no other operator.
            </p>
    </div>
</div>
{% endblock %}